import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useSearchParams } from 'react-router-dom';
import axios from 'axios';
import ProductCard from '../components/ProductCard';
import Searchbar from '../components/Searchbar';
import { API_URL } from '../apiConfig';
import { FiLoader } from 'react-icons/fi'; // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Ü‡¶á‡¶ï‡¶®

const SearchResultsPage = () => {
    const [searchResults, setSearchResults] = useState([]);
    const [page, setPage] = useState(1);
    const [hasMore, setHasMore] = useState(true); // ‡¶Ü‡¶∞‡¶ì ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶§‡ßá
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    const [searchParams] = useSearchParams();
    const query = searchParams.get('q');
    const category = searchParams.get('category');

    // ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡ßã‡ßü‡ßá‡¶∞‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    useEffect(() => {
        setSearchResults([]);
        setPage(1);
        setHasMore(true);
    }, [query, category]);

    // ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø useEffect
    useEffect(() => {
        if (!query) {
            setSearchResults([]);
            setIsLoading(false);
            return;
        }

        // ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶¨‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®
        if (!hasMore) return;

        const fetchSearchResults = async () => {
            setIsLoading(true);
            setError(null);
            try {
                // üöÄ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®: API ‡¶ï‡¶≤‡ßá page ‡¶è‡¶¨‡¶Ç limit ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
                const { data } = await axios.get(`${API_URL}/api/products/search`, {
                    params: { q: query, category, page, limit: 12 } // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞‡ßá ‡ßß‡ß®‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶≤‡ßã‡¶° ‡¶π‡¶¨‡ßá
                });
                
                // ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
                setSearchResults(prev => [...prev, ...data.products]);
                // ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ hasMore ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
                setHasMore(page < data.totalPages);

            } catch (err) {
                setError('Failed to fetch search results. Please try again.');
            } finally {
                setIsLoading(false);
            }
        };

        fetchSearchResults();
    }, [query, category, page, hasMore]);

    // üöÄ ‡¶á‡¶®‡¶´‡¶ø‡¶®‡¶ø‡¶ü ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Intersection Observer
    const observer = useRef();
    const lastProductElementRef = useCallback(node => {
        if (isLoading) return;
        if (observer.current) observer.current.disconnect();
        observer.current = new IntersectionObserver(entries => {
            if (entries[0].isIntersecting && hasMore) {
                setPage(prevPage => prevPage + 1); // ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßá‡¶ú ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
            }
        });
        if (node) observer.current.observe(node);
    }, [isLoading, hasMore]);

    return (
        <div>
            <Searchbar />
            <div className="mt-8 container mx-auto px-4">
                <h2 className="text-2xl font-bold text-gray-800 mb-4">
                    Search Results for: <span className="text-blue-600">"{query}"</span>
                </h2>
                
                {error && <p className="text-center py-10 text-red-500">{error}</p>}
                
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {searchResults.map((product, index) => {
                        // üöÄ ‡¶∂‡ßá‡¶∑‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá ref ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
                        if (searchResults.length === index + 1) {
                            return (
                                <div ref={lastProductElementRef} key={product._id}>
                                    <ProductCard product={product} />
                                </div>
                            );
                        } else {
                            return <ProductCard key={product._id} product={product} />;
                        }
                    })}
                </div>

                {isLoading && (
                    <div className="flex justify-center items-center py-10">
                        <FiLoader className="animate-spin text-3xl text-indigo-500" />
                        <p className="ml-2">Loading products...</p>
                    </div>
                )}
                
                {!isLoading && !error && searchResults.length === 0 && (
                     <p className="text-center py-10 text-gray-500">No products found.</p>
                )}

                {!hasMore && searchResults.length > 0 && (
                    <p className="text-center py-10 text-gray-500">You have seen all results.</p>
                )}
            </div>
        </div>
    );
};

export default SearchResultsPage;